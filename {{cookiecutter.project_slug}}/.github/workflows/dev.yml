# This is a basic workflow to help you get started with Actions

name: dev workflow

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [master, main, release]
  pull_request:
    branches: [master, main, release]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  id-token: write
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  test:
    # The type of runner that the job will run on
    strategy:
      matrix:
        python-versions: ["3.7", "3.8", "3.9", "3.10"]
        os: [ubuntu-20.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-versions }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry tox tox-gh-actions

      - name: test with tox
        run: tox

      - name: list files
        run: ls -l .

  publish_dev_build:
    # if test failed, we should not publish
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: {{ cookiecutter.dev_aws_region }}
          role-to-assume: ${{ secrets.DEV_CODEARTIFACT_ROLE_ARN }}
          role-session-name: RepoPublishPackage
          role-duration-seconds: 900

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry tox tox-gh-actions twine

      - name: test with tox
        run: tox

      - name: list files
        run: ls -l .

      - uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: coverage.xml

      - name: Build wheels and source tarball
        run: |
          poetry version $(poetry version --short)-dev.$GITHUB_RUN_NUMBER
          poetry version --short
          poetry build

      - name: publish to dev
        run: |
          aws codeartifact login --tool twine --domain {{ cookiecutter.dev_aws_codeartifact_domain }} --repository {{ cookiecutter.dev_aws_codeartifact_repository }}
          twine upload --repository codeartifact dist/*

